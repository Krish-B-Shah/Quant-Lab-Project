"""Streamlit dashboard skeleton for GatorAI."""
from __future__ import annotations

from pathlib import Path
from typing import List

import numpy as np
import pandas as pd
import streamlit as st

st.set_page_config(page_title="GatorAI Dashboard", layout="wide")


def get_processed_data_dir() -> Path:
    """Return the path to the processed data directory."""
    return Path(__file__).resolve().parents[2] / "data" / "processed"


def list_available_datasets() -> List[str]:
    """List CSV datasets generated by the data pipeline."""
    processed_dir = get_processed_data_dir()
    if not processed_dir.exists():
        return []
    return sorted(file.name for file in processed_dir.glob("*.csv"))


def load_dataset(filename: str) -> pd.DataFrame:
    """Load a processed dataset as a DataFrame."""
    dataset_path = get_processed_data_dir() / filename
    return pd.read_csv(dataset_path, index_col=0, parse_dates=True)


def render_sidebar() -> dict:
    """Render sidebar controls and return selected options."""
    st.sidebar.title("Configuration")

    st.sidebar.subheader("Data Source")
    datasets = list_available_datasets()
    selected_dataset = st.sidebar.selectbox(
        "Select processed dataset", options=["<none>"] + datasets, index=0
    )

    st.sidebar.subheader("Backtest Settings")
    strategy = st.sidebar.selectbox(
        "Strategy", ["Momentum", "Mean Reversion", "Equal Weight"]
    )
    lookback = st.sidebar.slider("Lookback Window (days)", min_value=5, max_value=250, value=60)

    st.sidebar.subheader("Optimizer Settings")
    risk_target = st.sidebar.slider("Risk Target (%)", min_value=2, max_value=20, value=10)
    max_assets = st.sidebar.number_input("Max Assets", min_value=1, max_value=50, value=10)

    st.sidebar.info(
        "These settings are placeholders. Backtesting and optimization modules will "
        "use them once integrated."
    )

    options = {
        "dataset": None if selected_dataset == "<none>" else selected_dataset,
        "strategy": strategy,
        "lookback": lookback,
        "risk_target": risk_target,
        "max_assets": max_assets,
    }
    return options


def render_data_overview(df: pd.DataFrame | None) -> None:
    """Render the data overview section."""
    st.header("Data Overview")
    if df is None:
        st.info("Select a dataset or upload your own to preview processed data.")
        return

    st.success(f"Loaded {df.shape[0]} rows and {df.shape[1]} columns from the data pipeline.")
    st.dataframe(df.head(), use_container_width=True)

    st.subheader("Summary Statistics")
    st.dataframe(df.describe().T, use_container_width=True)

    st.subheader("Sample Cumulative Returns")
    cumulative_returns = (1 + df).cumprod() - 1
    st.line_chart(cumulative_returns)


def render_backtest_placeholder(df: pd.DataFrame | None) -> None:
    """Render placeholder content for the backtest section."""
    st.header("Backtest Results (Placeholder)")

    cols = st.columns(3)
    cols[0].metric("Total Return", "12.5%", delta="+2.1% vs benchmark")
    cols[1].metric("Max Drawdown", "-8.4%", delta="-1.2%")
    cols[2].metric("Sharpe Ratio", "1.10", delta="+0.15")

    st.caption(
        "These metrics are mock values. The backtesting module will populate them with "
        "real results in future iterations."
    )

    if df is not None:
        st.subheader("Daily Returns Comparison")
        chart_data = df.copy()
        chart_data["Strategy"] = np.random.normal(0.001, 0.01, size=len(df))
        st.area_chart(chart_data)
    else:
        st.info("Load data to visualize sample backtest outputs.")


def render_optimizer_placeholder(df: pd.DataFrame | None) -> None:
    """Render placeholder content for the optimizer section."""
    st.header("Portfolio Optimizer (Placeholder)")

    col1, col2 = st.columns([2, 1])

    with col1:
        st.subheader("Allocation Preview")
        assets = df.columns.tolist() if df is not None else ["AAPL", "GOOG", "MSFT", "AMZN"]
        weights = np.linspace(0.05, 0.2, num=len(assets))
        weights = weights / weights.sum()
        allocation_preview = pd.DataFrame({"Asset": assets, "Weight": weights})
        st.bar_chart(allocation_preview.set_index("Asset"))

    with col2:
        st.subheader("Risk Metrics")
        risk_metrics = pd.DataFrame(
            {
                "Metric": ["Volatility", "VaR", "CVaR"],
                "Value": [12.3, -4.5, -6.8],
            }
        )
        st.table(risk_metrics)

    st.caption(
        "Optimizer visualizations use dummy data. When the optimizer is connected, this section "
        "will surface real allocations and risk analytics."
    )


def main() -> None:
    """Application entry point."""
    st.title("GatorAI Dashboard Skeleton")
    st.markdown(
        "This dashboard provides a scaffold for integrating processed data, backtesting results, "
        "and optimizer insights. Use the sidebar to configure placeholders and load datasets "
        "from the data pipeline."
    )

    options = render_sidebar()

    uploaded_file = st.file_uploader("Upload custom dataset (CSV)", type=["csv"])

    df: pd.DataFrame | None = None
    if options["dataset"]:
        try:
            df = load_dataset(options["dataset"])
        except FileNotFoundError:
            st.error(
                "Selected dataset could not be found. Ensure the data pipeline has generated "
                "the processed files."
            )
    elif uploaded_file is not None:
        df = pd.read_csv(uploaded_file, index_col=0, parse_dates=True)

    tabs = st.tabs(["Data", "Backtest", "Optimizer"])

    with tabs[0]:
        render_data_overview(df)
    with tabs[1]:
        render_backtest_placeholder(df)
    with tabs[2]:
        render_optimizer_placeholder(df)

    st.markdown("---")
    st.caption("Mahdi Haque • Sparsh Mogha • Krish Shah")


if __name__ == "__main__":
    main()
